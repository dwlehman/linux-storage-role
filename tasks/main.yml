---

# TODO: Argument validation.
#
# TODO: Set defaults as needed: lvm_vg, device_name, disks

#
# Resolve specified disks to device node paths.
#
- name: Resolve disks
  resolve_blockdev:
    spec: "{{ item }}"
  with_items: "{{ disks }}"
  register: resolved_disks

- debug: var=resolved_disks

- set_fact:
    disk_paths: "{{ resolved_disks.results|map(attribute='device')|list }}"

- name: Show disks
  debug:
    var: disk_paths

#
# Set the path for the final device based on device type.
#
- set_fact:
    device_path: "{{ disk_paths[0] }}"
  when: device_type == "disk"

- set_fact:
    device_path: "/dev/mapper/{{ lvm_vg }}-{{ device_name }}"
  when: device_type == "lvm"

- debug: var=device_path

#- name: Create disklabels as needed
#  debug:
#    msg: "Creating {{ partition_table_type }} partition table on {{ item }}"
#  when: use_partitions and device_type != 'disk'
#  with_items: "{{ disk_paths }}"

#
# Set the list of PV devices.
#
# TODO: Decide on semantics. Playbook PV specs should probably be complete to enable idempotency.
#
- name: Get current PVs
  shell: pvs -o name --noheadings --select 'vg_name={{ lvm_vg }}'
  register: pvs_cmd
  become: true
  when: disks == [] and device_type == "lvm" and lvm_vg in ansible_facts.lvm.vgs

- set_fact:
    pvs: "{{ disk_paths }}"
  when: device_type == "lvm"

- set_fact:
    pvs: "{{ pvs_cmd.stdout.split() }}"
  when: disks == [] and device_type == "lvm" and lvm_vg in ansible_facts.lvm.vgs

- set_fact:
    pvs: "{{ pvs|unique }}"
  when: device_type == "lvm"

# TODO: Figure out how to get the name of the new partition.
# TODO: Figure out how to determine partition disk(s) and size(s).
#- name: Create partition if needed
#  debug:
#    msg: "Creating partition of size {{ size }} on {{ disk_paths[0] }}"
#  when: (use_partitions and device_type != 'disk') or device_type == "partition"

- name: Make sure VG exists if needed
  lvg:
    vg: "{{ lvm_vg }}"
    pvs: "{{ pvs }}"
    #pesize: "{{ lvm_extent_size }}"
  when: device_type == "lvm" and lvm_vg != ""

- name: Make sure LV exists
  lvol:
    lv: "{{ device_name }}"
    vg: "{{ lvm_vg }}"
    size: "{{ size }}"
  #debug:
  #  msg: "running lvol with name {{ device_name }} and size {{ size }} in vg {{ lvm_vg }}"
  when: device_type == "lvm"

# TODO: Get the device node path. Could be disk, partition, luks, lvm, md, vdo.

- name: Create filesystem as needed
  filesystem:
    dev: "{{device_path}}"
    fstype: "{{ fs_type }}"
    opts: "{{ fs_create_options }}"
  #debug:
  #  msg: "Creating {{ fs_type }} on {{ device_path }}"
  when: fs_type != ""

# TODO: set the mount device identifier

# Set up the mount using a stable device identifier.
# XXX Does the mount module preserve the user-specified device identifier?
- name: Set up the mount
  mount:
    src: "{{ device_path }}"
    path: "{{ mount_point }}"
    fstype: "{{ fs_type }}"
    opts: "{{ mount_options }}"
    state: "{{ mount_state }}"
  #debug:
  #  msg: "Adding mount entry for {{ device_name }} on {{ mount_point }} as {{ fs_type }} using {{ mount_device_identifier }}"
  when: mount_point != ""

- name: Update facts
  setup:
