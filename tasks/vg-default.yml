---
#
# Set the list of PV devices.
#
# TODO: Decide on semantics. Playbook PV specs should probably be complete to enable idempotency.
#
- name: Install LVM2 commmands as needed
  package:
    name: lvm2
    state: present
  when: device_type == "lvm"
  
- block:
    - name: collect list of current pvs
      command: pvs -o name --noheadings --select 'vg_name={{ lvm_vg }}'
      register: pvs_cmd
      become: true
  rescue:
    - debug:
        msg: "Failed to run pvs"
  when: disks == [] and device_type == "lvm" and lvm_vg in ansible_facts.lvm.vgs

- name: Set pvs based on disk set
  set_fact:
    pvs: "{{ disk_paths }}"
  when: device_type == "lvm"

- name: Set pvs from current vg
  set_fact:
    pvs: "{{ pvs_cmd.stdout.split() }}"
  when: disks == [] and device_type == "lvm" and lvm_vg in ansible_facts.lvm.vgs

#
# Get list of LVs.
#
# We will only remove VG if there are no more LVs and state is "absent".
#
- block:
    - name: collect list of current lvs
      command: lvs -o name --noheadings --select 'vg_name={{ lvm_vg }}'
      register: lvs_cmd
      become: true
  rescue:
    - debug:
        msg: "Failed to run lvs"
  when: device_type == "lvm" and state == "absent"

- name: determine whether vg is being removed (1/2)
  set_fact:
    remove_vg: false

- name: determine whether vg is being removed (2/2)
  set_fact:
    remove_vg: true
  when: device_type == "lvm" and state == "absent" and not ansible_check_mode and not lvs_cmd.stdout

#
# Configure the VG
#
- block:
    - name: configure vg
      lvg:
        vg: "{{ lvm_vg }}"
        pvs: "{{ pvs }}"
        #pesize: "{{ lvm_extent_size }}"
        state: "{{ state }}"
  rescue:
    - debug:
        msg: "Failed to configure vg"
  when: device_type == "lvm" and lvm_vg and (state == "present" or remove_vg)

- block:
   - name: wipe pvs
     command: pvremove {{ pv_path }}
     with_items: "{{ pvs }}"
     loop_control:
       loop_var: pv_path
  rescue:
    - debug:
        msg: "Failed to wipe pv signatures."
  when: remove_vg
